# Encrypted By: @MU_BULLET
import base64 as b64
from cryptography.fernet import Fernet as F
import sys as s

_kx = "=0DO4EDcHlTVihVbJh0YFdzNn1GVV91R6B3dF1SQnNVRyIVThdEbpJjSoJTN"
_key = b64.b64decode(_kx[::-1])

try:
    _d = b64.b64decode('')
    _c = F(_key).decrypt(_d).decode()
    exec(_c)
except Exception as e:
    print(f"\n[✘] Decryption failed: {e}")
    print("⚠️ Encrypted integrity check failed. Possible tampering detected.")
